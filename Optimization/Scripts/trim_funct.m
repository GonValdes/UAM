function F = trim_funct(vars,initialise,geo,T,qbar,q_prop,prop_cg_loc,CD,y_mac)
%Calculate trimming values accounting for vertical speed in form of flight path angle gamma, assumptions:
%  Linear aerodynamics, propeller angle of attack effect included with ESDU correction 
%  counter-rotating propellers eliminate lateral-directional terms
%
%Forces are in wind axis. Moments in body axis F = [Lift direction positive up, Drag direction positive frontward,  Pitch Moment positive nose up]

%Calculate forces
%Lift in wind axis
F(1) = qbar*geo.S_w*(initialise.CL0 + initialise.CLa*vars(1) + initialise.CLdinA*vars(3))...
    -2000*9.81 + 2* (T *sin(vars(1)+vars(2)) - q_prop*(vars(1)+vars(2))*cos(vars(1)+vars(2)));%LIFT
%dRAG in wind axis
F(2) = -qbar*geo.S_w*(initialise.CD0 +...
    geo.K*(initialise.CL0 + initialise.CLa*vars(1) + initialise.CLdinA*vars(3))^2 ...
    + initialise.CDdinA*abs(vars(3))) + 2*(T*cos(vars(1)+vars(2)) + q_prop*(vars(1)+vars(2))*sin(vars(1)+vars(2)));%DRAG
%Moment in body axis
F(3) = qbar*geo.S_w*geo.mac_w * (initialise.Cm0 + initialise.Cma*vars(1) + initialise.CmdinA*vars(3))...
    + prop_cg_loc(1)*2* (T *sin(vars(1)+vars(2)) - q_prop*(vars(1)+vars(2))*cos(vars(1)+vars(2)))+...
    prop_cg_loc(3)*2*(T*cos(vars(1)+vars(2)) + q_prop*(vars(1)+vars(2))*sin((vars(1)+vars(2))))+...
    qbar*geo.S_w*CD.c*(cos(vars(1))*geo.zle_c + sin(vars(1))*abs(initialise.CG-geo.mac_c/4))-...
    qbar*geo.S_w*CD.w*sin(vars(1))*abs(initialise.CG-(geo.xle_w+sind(geo.sweep1_w)*y_mac+geo.mac_w/4))+...
    qbar*geo.S_w*CD.fus* sin(vars(1))*abs(initialise.CG-geo.Cr_fus/4);%Moment
end